// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_starwars_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StarWarsClient is the client API for StarWars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarWarsClient interface {
	CityMgmtBroker(ctx context.Context, in *NewCity, opts ...grpc.CallOption) (*RespBroker1, error)
	CityLeiaBroker(ctx context.Context, in *NewCity, opts ...grpc.CallOption) (*RespBroker2, error)
}

type starWarsClient struct {
	cc grpc.ClientConnInterface
}

func NewStarWarsClient(cc grpc.ClientConnInterface) StarWarsClient {
	return &starWarsClient{cc}
}

func (c *starWarsClient) CityMgmtBroker(ctx context.Context, in *NewCity, opts ...grpc.CallOption) (*RespBroker1, error) {
	out := new(RespBroker1)
	err := c.cc.Invoke(ctx, "/starwars.StarWars/CityMgmtBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starWarsClient) CityLeiaBroker(ctx context.Context, in *NewCity, opts ...grpc.CallOption) (*RespBroker2, error) {
	out := new(RespBroker2)
	err := c.cc.Invoke(ctx, "/starwars.StarWars/CityLeiaBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarWarsServer is the server API for StarWars service.
// All implementations must embed UnimplementedStarWarsServer
// for forward compatibility
type StarWarsServer interface {
	CityMgmtBroker(context.Context, *NewCity) (*RespBroker1, error)
	CityLeiaBroker(context.Context, *NewCity) (*RespBroker2, error)
	mustEmbedUnimplementedStarWarsServer()
}

// UnimplementedStarWarsServer must be embedded to have forward compatible implementations.
type UnimplementedStarWarsServer struct {
}

func (UnimplementedStarWarsServer) CityMgmtBroker(context.Context, *NewCity) (*RespBroker1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CityMgmtBroker not implemented")
}
func (UnimplementedStarWarsServer) CityLeiaBroker(context.Context, *NewCity) (*RespBroker2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CityLeiaBroker not implemented")
}
func (UnimplementedStarWarsServer) mustEmbedUnimplementedStarWarsServer() {}

// UnsafeStarWarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarWarsServer will
// result in compilation errors.
type UnsafeStarWarsServer interface {
	mustEmbedUnimplementedStarWarsServer()
}

func RegisterStarWarsServer(s grpc.ServiceRegistrar, srv StarWarsServer) {
	s.RegisterService(&StarWars_ServiceDesc, srv)
}

func _StarWars_CityMgmtBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarWarsServer).CityMgmtBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarWars/CityMgmtBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarWarsServer).CityMgmtBroker(ctx, req.(*NewCity))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarWars_CityLeiaBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarWarsServer).CityLeiaBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarWars/CityLeiaBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarWarsServer).CityLeiaBroker(ctx, req.(*NewCity))
	}
	return interceptor(ctx, in, info, handler)
}

// StarWars_ServiceDesc is the grpc.ServiceDesc for StarWars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarWars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "starwars.StarWars",
	HandlerType: (*StarWarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CityMgmtBroker",
			Handler:    _StarWars_CityMgmtBroker_Handler,
		},
		{
			MethodName: "CityLeiaBroker",
			Handler:    _StarWars_CityLeiaBroker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starwars/starwars.proto",
}
